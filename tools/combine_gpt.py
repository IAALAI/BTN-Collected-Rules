import ipaddress
import glob
from datetime import datetime, timezone

header = """# Generated by BTN Collected Rules {time}
# https://github.com/btnet/rules
#
# IPv4 prefix: {ipv4_prefix}
# IPv6 prefix: {ipv6_prefix}
#
"""

blocks_stack = []  # 嵌套块注释栈
comment_blocks = {}  # IP -> 注释块映射
comments_single = {}  # IP -> 单行注释映射
current_block = None  # 当前注释块

def parse_line(line):
    line = line.strip()
    if not line:
        return None, None, None
    
    if line.startswith('#'):
        if "---START---" in line:
            blocks_stack.append([line])
            return None, None, None
        elif "---END---" in line:
            if blocks_stack:
                current = blocks_stack.pop()
                current.append(line)
                if blocks_stack:
                    blocks_stack[-1].extend(current)
                else:
                    global current_block
                    current_block = '\n'.join(current)
            return None, None, None
        else:
            if blocks_stack:
                blocks_stack[-1].append(line)
            else:
                global current_block
                current_block = line if not current_block else current_block + '\n' + line
            return None, None, None

    mark = line.find('#')
    if mark >= 0:
        ip_str = line[:mark].strip()
        comment = line[mark:]
        try:
            ip = ipaddress.ip_network(ip_str, strict=False)
            if current_block:
                add_comment(ip, current_block, comment)
            else:
                add_comment(ip, "", comment)
            return line, ip, comment
        except:
            return None, None, None
    else:
        try:
            ip = ipaddress.ip_network(line.strip(), strict=False)
            if current_block:
                add_comment(ip, current_block, None)
            return line, ip, None
        except:
            return None, None, None

def add_comment(ip, comment_block, comment):
    if not ip in comment_blocks:
        comment_blocks[ip] = []
    if comment_block and comment_block not in comment_blocks[ip]:
        comment_blocks[ip].append(comment_block)
    if comment:
        if not ip in comments_single:
            comments_single[ip] = []
        if comment not in comments_single[ip]:
            comments_single[ip].append(comment)

def find_comment_blocks(new_ip, full=False):
    if not full and new_ip in comment_blocks:
        return comment_blocks[new_ip], [new_ip]
    blocks = []
    ips = i_include_which(new_ip, comment_blocks)
    for ip in ips:
        for comment in comment_blocks[ip]:
            if comment not in blocks:
                blocks.append(comment)
    return blocks, ips

def i_include_which(new_ip, ip_list):
    return [ip for ip in ip_list 
            if ip == new_ip or (ip.version == new_ip.version and ip.subnet_of(new_ip))]

def which_have_me(new_ip, ip_list):
    for ip in ip_list:
        if ip.version == new_ip.version and new_ip.subnet_of(ip):
            return ip
    return None

# 主处理逻辑
ipv4_prefix = ""
ipv6_prefix = ""
collapsed = []
added = []

for name in glob.glob("*.txt"):
    with open(name, encoding='utf-8') as f:
        current_block = None
        blocks_stack.clear()
        
        for line in f:
            line = line.strip()
            if not line:
                continue
                
            if line.startswith("# IPv4 prefix:"):
                ipv4_prefix = line[14:].strip()
            elif line.startswith("# IPv6 prefix:"):
                ipv6_prefix = line[14:].strip()
            else:
                _, ip, _ = parse_line(line)
                if ip and ip not in collapsed:
                    collapsed.append(ip)

deleted = list(set(comment_blocks.keys()) - set(collapsed))
comment_blocks_new = {}

for old_ip in deleted:
    ip = which_have_me(old_ip, collapsed)
    if ip and ip not in added:
        added.append(ip)

for ip in collapsed:
    blocks, ips = find_comment_blocks(ip, ip in added)
    if not blocks:
        continue
    new_comment_block = blocks[0]
    if len(blocks) >= 2:
        new_comment_block = "# [Merged Comment]\n" + "\n".join(blocks)
    if new_comment_block not in comment_blocks_new:
        comment_blocks_new[new_comment_block] = []
    
    ip_str = str(ip.network_address) if (ip.version == 4 and ip.prefixlen == 32) or (ip.version == 6 and ip.prefixlen == 128) else str(ip)
    comment_single_new = []
    for old_ip in ips:
        if old_ip in comments_single:
            comment_single_new.extend(comments_single[old_ip])
    if comment_single_new:
        ip_str += " " + " ".join(comment_single_new)
    comment_blocks_new[new_comment_block].append(ip_str)

# 输出结果
with open("combine/all.txt", "w", encoding='utf-8') as f:
    f.write(header.format(
        time=datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S %Z'),
        ipv4_prefix=ipv4_prefix,
        ipv6_prefix=ipv6_prefix
    ))
    for comment_block in comment_blocks_new:
        f.write(comment_block)
        f.write("\n")
        f.write("\n".join(comment_blocks_new[comment_block]))
        f.write("\n\n")
